// import { getCurrentUser } from "@/services/AuthService"; // Import the function to get the current user's info
// import { NextRequest, NextResponse } from "next/server"; // Import NextRequest and NextResponse for handling requests and responses



// // Define a type for roles based on the role-based private routes
// type Role = keyof typeof roleBasedPrivateRoutes;

// // Define public routes that do not require authentication
// const authRoutes = ["/login"];

// // Define role-based private routes for different user roles
// const roleBasedPrivateRoutes = {
//   user: [/^\/user/], // Routes accessible by regular users
//   admin: [/^\/admin/], // Routes accessible by admin users
// };

// // Middleware function to handle requests
// export const middleware = async (request: NextRequest) => {
//   const { pathname } = request.nextUrl; // Extract the pathname from the incoming request

//   const userInfo = await getCurrentUser(); // Fetch the current user's information

//   // Check if the user is not logged in (userInfo is null or undefined)
//   if (!userInfo) {
//     // If the requested route is a public/auth route
//     if (authRoutes.includes(pathname)) {
//       return NextResponse.next(); // Allow access to the public route
//     } else {
//       // If trying to access a protected route, redirect to the login page
//       return NextResponse.redirect(
//         new URL(
//           `http://localhost:3000/login?redirectPath=${pathname}`, // Redirect to the login page with the original path to redirect back after login
//           request.url
//         )
//       );
//     }
//   }

//   // If the user is logged in and has a defined role
//   if (userInfo?.role && roleBasedPrivateRoutes[userInfo?.role as Role]) {
//     const routes = roleBasedPrivateRoutes[userInfo?.role as Role]; // Get the routes for the user's role
//     // Check if the requested pathname matches any of the allowed routes for the user's role
//     if (routes.some((route) => pathname.match(route))) {
//       return NextResponse.next(); // Allow access to the route if it matches
//     }
//   }

//   // If the user is logged in but does not have permission for the requested route, redirect to the home page
//   return NextResponse.redirect(new URL("/", request.url));
// };


// // Configuration for the middleware to specify which routes it should match
// export const config = {
//   matcher: [
//     "/login", // Public login route
//     "/admin", // Admin dashboard route
//     "/admin/:path*", // Matches all nested admin routes (e.g., /admin/dashboard/allusers)
//     "/user", // User dashboard route
//     "/user/:path*", // Matches all nested user routes (e.g., /user/profile/settings)
//   ],
// };